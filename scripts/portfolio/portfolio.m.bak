function results = portfolio()

% EXAMPLE of the simple interface of alfonso:
% portfolio optimization with a factor risk model and market impact
% -------------------------------------------------------------------------
% USAGE of "portfolio"
% results = portfolio(f, n)
% -------------------------------------------------------------------------
% INPUT
% f:                    number of factors (typical value: 20)
% n:                    number of assets (typical value: few hundreds)
%
% OUTPUT
% results:              final solution and iteration statistics
%                       see alfonso.m for details
% -------------------------------------------------------------------------

    % generate some realistic-looking random data
    %[mu, B, Omega, diagD, beta, delta, gamma, h] = getData(f,n);
    [mu, B, Omega, diagD, beta, delta, gamma, h] = getDataFromFile();
    [n, f] = size(B);
    
    % variable order: x, (z_i, 1, t_i)_{i=1:n}, (gamma, d, u)
    
    % K = R_+^n x P_{1/beta,1-1/beta}^n x Q_{n+f+1}
    K = cell(1,n+2);
    K{1} = struct('type','lp','dim',n);
    [K{2:n+1}] = deal(struct('type','gpow','dim',3,'lambda',[1/beta; 1-1/beta]));
    K{n+2} = struct('type','socp','dim',n+f+1);
    
    rows = 1+n+n+f+n+1;
    cols = n+3*n+(n+f+1);
    
    A = zeros(rows, cols);
    b = zeros(rows,1);
    c = zeros(cols,1);
    
    c(1:n) = -mu;
    c(n+1:3:4*n-2) = delta;
    
    % e'x = 1
    A(1,1:n) = 1;
    b(1) = 1;

    % x-t = h
    A(2:n+1,1:n) = eye(n);
    A(2:n+1,n+3:3:n+3*n) = -eye(n);
    b(2:n+1) = h;

    % d - Delta^{1/2}*x = 0
    A(n+2:2*n+1,4*n+1+(1:n)) = eye(n);
    A(n+2:2*n+1,1:n) = -diag(sqrt(diagD));

    % u - Omega^{1/2}B'*x = 0
    A(2*n+2:2*n+1+f,5*n+1+(1:f)) = eye(f);
    A(2*n+2:2*n+1+f,1:n) = -sqrtm(Omega)*B';

    % constants
    A(2*n+1+f+(1:n), n+2:3:4*n-1) = eye(n);
    b(2*n+1+f+(1:n)) = 1;
    A(2*n+1+f+n+1,4*n+1) = 1;
    b(2*n+1+f+n+1,1) = gamma;
    
    A = sparse(A);

    fprintf('A size:(%d x %d), sparsity:%f\n',rows,cols,nnz(A)/numel(A));

    opts.preprocess = 0;
    opts.optimTol = 1e-7;
    results = alfonso_simple(c, A, b, K, [], opts);
    results.data = struct('h',h,'mu',mu,'Sigma',B*Omega*B'+diag(diagD),'Delta',diag(diagD),'B',B,'Omega',Omega,'delta',delta);

return


function [mu, B, Omega, diagD, beta, delta, gamma, h] = getData(f,n)

    if ~isOctave()
        rng(2020,'twister');
    else
        rand('state', 2020);
    end

    % optimization model parameters
    gamma = 0.2;
    delta = 0.1*ones(n,1);
    h     = 1/n * ones(n,1);

    % market model parameters
    beta  = 5/3;
    mu = randn(n,1);
    B  = [ones(n,1), randn(n,f-1)*0.2];   % first column representing baseline volatility
    
    % generate a random orthogonal matrix from the Haar distribution
    [Q,R] = qr(randn(f));
    Q = Q*diag(sign(diag(R)));
    
    Omega = Q * diag((0.15 + 0.025*randn(f,1)).^2) * Q';
    diagD = (0.2 + 0.05*randn(n,1)).^2;

return


function [mu, B, Omega, diagD, beta, delta, gamma, h] = getDataFromFile()

    if ~isOctave()
        rng(2020,'twister');
    else
        rand('state', 2020);
    end

    B = csvread('B500.csv');
    Omega = csvread('Omega.csv');
    diagD = csvread('Delta500.csv');
    % mu = randn(n,1);
    mu = csvread('alpha.csv');
    
    [n,f] = size(B);
    
    % optimization model parameters
    gamma = 0.25;%0.2;
    delta = 0.01*ones(n,1); % 0.1 * ones(n,1);
    h     = 1/(n+1) * ones(n,1); % equal distribution, incl. cash in hand for now

    % market model parameters
    beta  = 5/3;
    
return

